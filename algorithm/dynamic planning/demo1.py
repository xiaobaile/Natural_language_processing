"""
一只青蛙一次可以跳上1级台阶，也可以跳上2级，求该青蛙跳上一个n级台阶总共有多少种跳法？

1。定义数组元素的含义
dp【i】：跳上一个i级台阶总共有dp【i】种跳法。
2。找出数组元素之间的关系式
动态规划问题就是把一个规模比较大的问题分成几个规模比较小的问题，然后由小的问题推导出大的问题。
根据实际问题，青蛙到达第n级的台阶有两种方式：
    一种是从第n-1级跳上来
    一种是从第n-2级跳上来
    由于我们要计算所有可能的跳法，所以有：dp【n】 = dp【n-1】 + dp【n-2】
3。找出初始条件
当n=1时，数组出现下标为负数的情况，而这是不允许的。我们必须要直接给出它的数值，相当于初始值。
dp[1] = 1, dp[0] = 0
dp[1] = dp[0] + dp[-1]

"""


def frog(n):
    if n <= 1:
        return n
    else:
        dp = [0, 1]
        for i in range(2, n):
            dp.append(dp[i-1] + dp[i-2])
        return dp[-1]


def run():
    n = 7
    result = frog(n)
    print(result)


if __name__ == '__main__':
    run()
